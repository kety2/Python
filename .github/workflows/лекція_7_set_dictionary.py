# -*- coding: utf-8 -*-
"""Лекція 7. Set. Dictionary

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RYhw2MMW66Zjt1eE5ZxsoLTI6-z8Ucrl

task 1
"""

import random

capitals = {
    'Ukraine': 'Kyiv', 'France': 'Paris', 'Germany': 'Berlin',
    'Italy': 'Rome', 'USA': 'Washington', 'Canada': 'Ottawa',
    'Switzerland': 'Bern', 'Austria': 'Vienna',
    'Belgium': 'Brussels', 'Sweden': 'Stockholm',
    'Norway': 'Oslo', 'Denmark': 'Copenhagen',
    'Finland': 'Helsinki', 'Poland': 'Warsaw',
    'Romania': 'Bucharest', 'Bulgaria': 'Sofia', 'Greece': 'Athens',
}

def play_game():
    lives = 3
    score = 0

    while lives > 0:
        country = random.choice(list(capitals.keys()))
        capital = capitals[country]

        print(f"Country: {country}")
        guess = input("Guess the capital (type 'exit' to quit): ").strip()

        if guess.lower() == 'exit':
            break

        if guess == capital:
            score += 1
            print("You are right!")
        else:
            lives -= 1
            print(f"Wrong guess! You have {lives} {'life' if lives == 1 else 'lives'} left.")
            if lives == 0:
                print("Game over!")
                break
            hint = capital[:len(capital) - (lives - 1)]
            print(f"Hint: {hint}")

        print(f"Current score: {score}\n")

    print(f"Final score: {score}")

if __name__ == "__main__":
    print("Welcome to the Capital Guessing Game!")
    play_game()

"""task 2

"""

def roman_to_int(s):
    roman_to_int_dict = {
        'I': 1,
        'V': 5,
        'X': 10,
        'L': 50,
        'C': 100,
        'D': 500,
        'M': 1000
    }

    result = 0
    prev_value = 0

    for symbol in reversed(s):
        current_value = roman_to_int_dict[symbol]

        if current_value < prev_value:
            result -= current_value
        else:
            result += current_value

        prev_value = current_value

    return result

def test_roman_to_int():
    result1 = roman_to_int("III")
    assert result1 == 3

    result2 = roman_to_int("LVIII")
    assert result2 == 58

    result3 = roman_to_int("MCMXCIV")
    assert result3 == 1994

if __name__ == "__main__":
    test_roman_to_int()

"""task 3

"""

def int_to_roman(num):
    val = [
        1000, 900, 500, 400,
        100, 90, 50, 40,
        10, 9, 5, 4,
        1
    ]
    syms = [
        "M", "CM", "D", "CD",
        "C", "XC", "L", "XL",
        "X", "IX", "V", "IV",
        "I"
    ]
    roman_numeral = ''

    i = 0
    while num > 0:
        for _ in range(num // val[i]):
            roman_numeral += syms[i]
            num -= val[i]
        i += 1

    return roman_numeral

def test_int_to_roman():
    result1 = int_to_roman(3)
    assert result1 == "III"

    result2 = int_to_roman(58)
    assert result2 == "LVIII"

    result3 = int_to_roman(1994)
    assert result3 == "MCMXCIV"

if __name__ == "__main__":
    test_int_to_roman()

"""task 4

"""

def majority_element(nums):
    candidate = None
    count = 0

    for num in nums:
        if count == 0:
            candidate = num
            count = 1
        elif num == candidate:
            count += 1
        else:
            count -= 1

    return

"""task 5

"""

def get_subjects_not_passed_by_all_students(student_exams):
    subjects_not_passed = set()
    subject_scores = {}

    for student, score, subject in student_exams:
        if subject not in subject_scores:
            subject_scores[subject] = []

        subject_scores[subject].append(score)

    for subject, scores in subject_scores.items():
        if all(score >= 60 for score in scores):
            continue
        subjects_not_passed.add(subject)

    return subjects_not_passed

def test_get_subjects_not_passed_by_all_students():
    exams = [
        ("Alice", 85, "Math"),
        ("Bob", 59, "Math"),
        ("Charlie", 65, "Math"),
        ("Alice", 90, "Science"),
        ("Bob", 80, "Science"),
        ("Charlie", 32, "Science"),
        ("Alice", 95, "History"),
        ("Bob", 85, "History"),
        ("Charlie", 90, "History"),
    ]

    assert get_subjects_not_passed_by_all_students(exams) == {"Science", "Math"}

if __name__ == "__main__":
    test_get_subjects_not_passed_by_all_students()